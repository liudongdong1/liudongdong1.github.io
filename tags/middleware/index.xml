<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Middleware - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/middleware/</link>
    <description>Middleware - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 22 Sep 2022 21:31:56 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/middleware/" rel="self" type="application/rss+xml" /><item>
  <title>面经_消息队列</title>
  <link>https://liudongdong1.github.io/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%9D%A2%E7%BB%8F/</link>
  <pubDate>Thu, 22 Sep 2022 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%9D%A2%E7%BB%8F/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2016/11/04/21/34/beach-1799006_640.jpg" referrerpolicy="no-referrer">
      </div>1. 消息队列优缺点 优点 消息队列的优点就是：解耦、异步、削峰。 缺点 降低系统的可用性：系统引入的外部依赖越多，越容易挂掉； 系统复杂度提高：使用 MQ 后]]></description>
</item>
<item>
  <title>rpc框架-mercury</title>
  <link>https://liudongdong1.github.io/rpc%E6%A1%86%E6%9E%B6_mercury/</link>
  <pubDate>Mon, 25 Jul 2022 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rpc%E6%A1%86%E6%9E%B6_mercury/</guid>
  <description><![CDATA[Mercury is a Remote Procedure Call (RPC) framework specifically designed for use in High-Performance Computing (HPC) systems with high-performance fabrics. Objective &amp; comparision Objective: Create a reusable RPC libraryfor use in HPC that can serve as a basis for services such as storage systems, I/O forwarding, analysis frameworks and other forms of inter-application communication 优势： takes advantage of low-level HPC network fabrics and facilitates the development of user-level]]></description>
</item>
<item>
  <title>RPC 框架的可靠性设计</title>
  <link>https://liudongdong1.github.io/rpc-%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1/</link>
  <pubDate>Sat, 25 Jun 2022 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rpc-%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1/</guid>
  <description><![CDATA[https://www.infoq.cn/article/bzekar1wxqg-2dpare9o 1. 背景 1.1 分布式调用引入的故障 在传统的单体架构中，业务服务调用都是本地方法调用，不会涉及到网络通信、协议栈、消息序列化和反序列化等，当使用 RPC]]></description>
</item>
<item>
  <title>通信机制</title>
  <link>https://liudongdong1.github.io/%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/</link>
  <pubDate>Wed, 15 Sep 2021 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/VTRBWVOXY6.jpg" referrerpolicy="no-referrer">
      </div>一对一的交互方式： Request/response： 标准的请求/应答方式。客户端发送请求到服务并等待应答。客户端期待应答在适当的时间内到达。]]></description>
</item>
<item>
  <title>rpc_ecology</title>
  <link>https://liudongdong1.github.io/rpc_ecology/</link>
  <pubDate>Sun, 25 Jul 2021 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rpc_ecology/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/0IBRE3AARG.jpg" referrerpolicy="no-referrer">
      </div>RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。这里的屏蔽底层网]]></description>
</item>
<item>
  <title>servicemesh</title>
  <link>https://liudongdong1.github.io/servicemesh/</link>
  <pubDate>Thu, 22 Jul 2021 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/servicemesh/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/46YBDQQ43I.jpg" referrerpolicy="no-referrer">
      </div>From: https://zhuanlan.zhihu.com/p/61901608 微服务 (Microservices) 是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使]]></description>
</item>
<item>
  <title>kafka_ecosystem</title>
  <link>https://liudongdong1.github.io/kafka_ecosystem/</link>
  <pubDate>Thu, 22 Jul 2021 08:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kafka_ecosystem/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/speed-motorboat_E4NINEMBFC.jpg" referrerpolicy="no-referrer">
      </div>From：https://dzone.com/articles/kafka-detailed-design-and-ecosystem Apache Kafka 的]]></description>
</item>
<item>
  <title>kafka_实时机器学习</title>
  <link>https://liudongdong1.github.io/kafka_%E5%AE%9E%E6%97%B6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link>
  <pubDate>Wed, 21 Jul 2021 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kafka_%E5%AE%9E%E6%97%B6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/poppy-flower_5ID3FW4GTD.jpg" referrerpolicy="no-referrer">
      </div>在Kafka应用程序中部署一个分析模型来进行实时预测。模式训练和模型部署可以是两个独立的过程。但是相同的步骤也可应用于数据集成和数据预处理，]]></description>
</item>
<item>
  <title>kafka_Stream</title>
  <link>https://liudongdong1.github.io/kafka_stream/</link>
  <pubDate>Wed, 21 Jul 2021 08:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kafka_stream/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/spider-web_A1MWQJDC12.jpg" referrerpolicy="no-referrer">
      </div>From: http://www.jasongj.com/kafka/kafka_stream/ 一、Kafka Stream背景 1. Kafka Stream是什么 Kafka Stream是Apache Kafka从0.10版本引入的一个新Feature。它是]]></description>
</item>
<item>
  <title>kafka_highAvailable</title>
  <link>https://liudongdong1.github.io/kafka_highavailable/</link>
  <pubDate>Tue, 20 Jul 2021 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kafka_highavailable/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/binocular-equipment_E4WML4H1GB.jpg" referrerpolicy="no-referrer">
      </div>1. 为何需要Replication 在Kafka在0.8以前的版本中，是没有Replication的，一旦某一个Broker宕机，则其上所有的P]]></description>
</item>
</channel>
</rss>
