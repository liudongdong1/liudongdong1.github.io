<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Math&amp;Model - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/mathmodel/</link>
    <description>Math&amp;Model - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 10 Nov 2021 23:21:29 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/mathmodel/" rel="self" type="application/rss+xml" /><item>
  <title>CommonMath</title>
  <link>https://liudongdong1.github.io/commonmath/</link>
  <pubDate>Wed, 10 Nov 2021 23:21:29 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/commonmath/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/09/25/19/22/animal-6655641__340.jpg" referrerpolicy="no-referrer">
      </div>The Apache Commons Math project is a library of lightweight, self-contained mathematics and statistics components addressing the most common practical problems not immediately available in the Java programming language or commons-lang. 官方案例文档 org.apache.commons.math4.stat - statistics, statistical tests org.apache.commons.math4.analysis - rootfinding, integration, interpolation, polynomials org.apache.commons.math4.random - random numbers, strings and data generation org.apache.commons.math4.special - special functions (Gamma, Beta) org.apache.commons.math4.linear - matrices, solving linear systems org.apache.commons.math4.util -]]></description>
</item>
<item>
  <title>AllenNLPIntroduce</title>
  <link>https://liudongdong1.github.io/allennlpintroduce/</link>
  <pubDate>Tue, 20 Oct 2020 07:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/allennlpintroduce/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210501113113.png" referrerpolicy="no-referrer">
      </div>you can write your own script to construct the dataset reader and model and run the training loop, or you can write a configuration file and use the allennlp train command 1. Text Classification Spam filtering Detect and filter spam emails Email Spam / Not spam Sentiment analysis Detect the polarity of text Tweet, review Positive / Negative Topic detection Detect the topic of text News article, blog post Business]]></description>
</item>
<item>
  <title>Resnet</title>
  <link>https://liudongdong1.github.io/resnet/</link>
  <pubDate>Tue, 13 Oct 2020 09:47:19 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/resnet/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/image-20201129141316442.png" referrerpolicy="no-referrer">
      </div>&#34;&#34;&#34; ResNet( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (layer1): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (1): BasicBlock( (conv1): Conv2d(64, 64,]]></description>
</item>
</channel>
</rss>
