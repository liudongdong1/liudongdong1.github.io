<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>opencv - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/opencv/</link>
    <description>opencv - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 29 Apr 2022 15:57:50 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/opencv/" rel="self" type="application/rss+xml" /><item>
  <title>Eye-Tracking Introduce</title>
  <link>https://liudongdong1.github.io/eye-tracking-introduce/</link>
  <pubDate>Fri, 29 Apr 2022 15:57:50 &#43;0000</pubDate>
  <author>LiuDongdong</author>
  <guid>https://liudongdong1.github.io/eye-tracking-introduce/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/pexels-photo-840810.jpeg" referrerpolicy="no-referrer">
      </div>Paper: Weakly-Supervised Physically Unconstrained Gaze Estimation 本次工作所探讨的问题是从人类互动的视频中进行弱监督的视线估计，基本原理是利用人们在进行 &ldquo;相互注视&rdquo;（LA]]></description>
</item>
<item>
  <title>LightestDetection</title>
  <link>https://liudongdong1.github.io/lightestdetection/</link>
  <pubDate>Thu, 10 Jun 2021 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/lightestdetection/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2016/05/16/15/40/texture-1395982__340.jpg" referrerpolicy="no-referrer">
      </div>minMaxLoc寻找矩阵(一维数组当作向量,用Mat定义) 中最小值和最大值的位置. 1. BrightArea import numpy as np import argparse import cv2 # construct the argument parse and parse the arguments ap = argparse.ArgumentParser() ap.add_argument(&#34;-i&#34;, &#34;--image&#34;, help = &#34;path to]]></description>
</item>
<item>
  <title>PictureDataType</title>
  <link>https://liudongdong1.github.io/picturedatatype/</link>
  <pubDate>Tue, 27 Oct 2020 08:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/picturedatatype/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/drops-falling-into-water.jpg" referrerpolicy="no-referrer">
      </div>1. 图像读取与存储 1.1. PIL from PIL import Image import numpy as np def imageloadDirectlyResize(path,resize): &#39;&#39;&#39; 直接通过PIL image 加载图像，resize操作 &#39;&#39;&#39; img = Image.open(path) img=img.resize((196,196)) img.show() #print(type(img)) #&lt;class &#39;PIL.Image.Image&#39;&gt; #img.save(&#34;1.jpg&#34;) return np.asarray(img) #196*196*3 1.2. skimage from skimage import io img=io.imread(&#39;img.jpg&#39;) io.imshow(img) io.show() io.imsave(&#39;img_copy.jpg&#39;, img) 1.3. matplotlib import matplotlib.pyplot]]></description>
</item>
<item>
  <title>OpencvExample</title>
  <link>https://liudongdong1.github.io/opencvexample/</link>
  <pubDate>Sun, 30 Aug 2020 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/opencvexample/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/Y2AHVPYB51.jpg" referrerpolicy="no-referrer">
      </div>1. 车牌识别 import cv2 import imutils import numpy as np import pytesseract pytesseract.pytesseract.tesseract_cmd = r&#39;C:\Program Files (x86)\Tesseract-OCR\tesseract.exe&#39; img = cv2.imread(&#39;D://skoda1.jpg&#39;,cv2.IMREAD_COLOR) img = cv2.resize(img, (600,400) ) gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #使用双边滤波（模糊）会从图像中删除不需要的细节。 gray = cv2.bilateralFilter(gray, 13, 15, 15) edged = cv2.Canny(gray, 30, 200) contours =]]></description>
</item>
<item>
  <title>OpencvBaseOp</title>
  <link>https://liudongdong1.github.io/cornersdetection/</link>
  <pubDate>Fri, 21 Aug 2020 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/cornersdetection/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/Y2AHVPYB51.jpg" referrerpolicy="no-referrer">
      </div>0. Image Processing 0.1. Scaling an Image import cv2 import numpy as np FILE_NAME = &#39;volleyball.jpg&#39; try: # Read image from disk. img = cv2.imread(FILE_NAME) # Get number of pixel horizontally and vertically. (height, width) = img.shape[:2] # Specify the size of image along with interploation methods. # cv2.INTER_AREA is used for shrinking, whereas cv2.INTER_CUBIC # is used for zooming. res = cv2.resize(img, (int(width / 2), int(height / 2)), interpolation]]></description>
</item>
<item>
  <title>OpenCV Emoji Recognition</title>
  <link>https://liudongdong1.github.io/opencv-emoji-recognition/</link>
  <pubDate>Sun, 05 Jul 2020 07:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/opencv-emoji-recognition/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/79.jpeg" referrerpolicy="no-referrer">
      </div>1. 表情识别模型 使用OpenVINO模型库中的emotions-recognition-retail-0003人脸表情模型，该模型是基于全卷积]]></description>
</item>
<item>
  <title>BlinkDetection</title>
  <link>https://liudongdong1.github.io/blinkdetection/</link>
  <pubDate>Fri, 29 May 2020 15:57:50 &#43;0000</pubDate>
  <author>LiuDongdong</author>
  <guid>https://liudongdong1.github.io/blinkdetection/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210501133220.png" referrerpolicy="no-referrer">
      </div>1. 眨眼检测 使用dlib库 眨眼检测 # import the necessary packages from scipy.spatial import distance as dist from imutils.video import FileVideoStream from imutils.video import VideoStream from imutils import face_utils import argparse import imutils import time import dlib import cv2 import os def eye_aspect_ratio(eye): # compute the euclidean distances between the two sets of # vertical eye landmarks (x, y)-coordinates A]]></description>
</item>
</channel>
</rss>
