<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Framework - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/framework/</link>
    <description>Framework - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/framework/" rel="self" type="application/rss+xml" /><item>
  <title>SPDK存储引擎-Blobstore&amp;BlobFs</title>
  <link>https://liudongdong1.github.io/spdk%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-blobstoreblobfs/</link>
  <pubDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-blobstoreblobfs/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/YVXGN1ZZUY.jpg" referrerpolicy="no-referrer">
      </div>Blobstore是位于SPDK bdev之上的Blob管理层，用于与用户态文件系统Blobstore Filesystem （BlobFS）集成，从而代替传统的文]]></description>
</item>
<item>
  <title>文件系统Fuse</title>
  <link>https://liudongdong1.github.io/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-fuse/</link>
  <pubDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-fuse/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/BOBHXEW8HR.jpg" referrerpolicy="no-referrer">
      </div>filesystem types: 文件系统类型 superblock: 整个文件系统的元信息 inode: 单个文件的元信息 dentry: 目录项，一个文件目录对应一个dentry file: 进程打开的一个文件 基于块设备的文件系统(]]></description>
</item>
<item>
  <title>rpc框架-mercury</title>
  <link>https://liudongdong1.github.io/rpc%E6%A1%86%E6%9E%B6_mercury/</link>
  <pubDate>Mon, 25 Jul 2022 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rpc%E6%A1%86%E6%9E%B6_mercury/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/ZK8O6RDT8X.jpg" referrerpolicy="no-referrer">
      </div>Mercury is a Remote Procedure Call (RPC) framework specifically designed for use in High-Performance Computing (HPC) systems with high-performance fabrics. Objective &amp; comparision Objective: Create a reusable RPC libraryfor use in HPC that can serve as a basis for services such as storage systems, I/O forwarding, analysis frameworks and other forms of inter-application communication 优势： takes advantage of low-level HPC network fabrics and facilitates the development of user-level]]></description>
</item>
<item>
  <title>PMDK-libpmemlog教程</title>
  <link>https://liudongdong1.github.io/pmdk-libpmemlog%E6%A1%88%E4%BE%8B/</link>
  <pubDate>Thu, 30 Jun 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-libpmemlog%E6%A1%88%E4%BE%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/KOGR7JW66X.jpg" referrerpolicy="no-referrer">
      </div>pmemlog_create() // 创建持久化的log内存 pmemlog_open() // 打开已创建的log内存 pmemlog_nbyte() // 获得某log内存内可以添加多少位的数据，而非多少条记录 pmemlog_append() // 向log内存中append]]></description>
</item>
<item>
  <title>PMDK-libpmemobj教程</title>
  <link>https://liudongdong1.github.io/pmdk-libpmemobj%E6%95%99%E7%A8%8B/</link>
  <pubDate>Thu, 30 Jun 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-libpmemobj%E6%95%99%E7%A8%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/MJB9NMEYJR.jpg" referrerpolicy="no-referrer">
      </div>Write &amp;Read PMEMobjpool pmemobj_create() // 创建持久化内存池 PMEMobjpool pmemobj_open() // 打开已创建的持久化内存池 PMEMoid pmemobj_root() // 得到持久化内存池的根节点 pmemobj_direct() // 得到根节点的指针 pmemobj_persist() // 将单变量进行持久化存储 pmemobj_memcpy_persist() // 将数]]></description>
</item>
<item>
  <title>RPC 框架的可靠性设计</title>
  <link>https://liudongdong1.github.io/rpc-%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1/</link>
  <pubDate>Sat, 25 Jun 2022 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rpc-%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/J2URWXE2OY.jpg" referrerpolicy="no-referrer">
      </div>https://www.infoq.cn/article/bzekar1wxqg-2dpare9o 1. 背景 1.1 分布式调用引入的故障 在传统的单体架构中，业务服务调用都是本地方法调用，不会涉及到网络通信、协议栈、消息序列化和反序列化等，当使用 RPC]]></description>
</item>
<item>
  <title>SPDK_IO 流程</title>
  <link>https://liudongdong1.github.io/spdk-io%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Sun, 29 May 2022 20:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk-io%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/MJCHXGTPJX.jpg" referrerpolicy="no-referrer">
      </div>首先，从虚拟机视角来说，它看到的是一个virtio-blk-pci设备，该pci设备内部包含一条virtio总线，其上又连接了virtio-]]></description>
</item>
<item>
  <title>SPDK_IO栈&amp;线程对比</title>
  <link>https://liudongdong1.github.io/spdk-io%E6%A0%88%E7%BA%BF%E7%A8%8B%E5%AF%B9%E6%AF%94/</link>
  <pubDate>Sun, 29 May 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk-io%E6%A0%88%E7%BA%BF%E7%A8%8B%E5%AF%B9%E6%AF%94/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/IJWJDIWG0Z.jpg" referrerpolicy="no-referrer">
      </div>IO栈对比 无论使用传统内核NVMe驱动，还是使用vhost，虚拟机内部的IO处理流程都是一样的：IO请求下发时需要从用户态应用程序中切换到内]]></description>
</item>
<item>
  <title>RDMA 介绍</title>
  <link>https://liudongdong1.github.io/rdma%E4%BB%8B%E7%BB%8D/</link>
  <pubDate>Sun, 01 May 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rdma%E4%BB%8B%E7%BB%8D/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/03/21/13/54/peach-blossom-7083263__340.jpg" referrerpolicy="no-referrer">
      </div>RDMA (RemoteDirect Memory Access) 技术全称远程直接内存访问，就是为了解决网络传输中服务器端数据处理的延迟而产生的。它将数据直接从一台计算机的内存传输到另一台计算机，无]]></description>
</item>
<item>
  <title>PMDK-paper</title>
  <link>https://liudongdong1.github.io/pmdk-paper/</link>
  <pubDate>Sat, 30 Apr 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-paper/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/KKYE2I2DBB.jpg" referrerpolicy="no-referrer">
      </div>Paper: MOSIQS Summary a persistent memory object storage framework with metadata indexing and querying for scientific computing MOSIQS provides an aggregate memory pool atop an array of persistent memory devices to store and access memory objects. MOSIQS uses a lightweight persistent memory key-value store to manage the metadata of memory objects such as persistent pointer mappings Challenge access, select and share a PMO without additional descriptive metadata.
PMOs are memory allocated objects and can only be accessed and shared via persistent pointers.]]></description>
</item>
</channel>
</rss>
