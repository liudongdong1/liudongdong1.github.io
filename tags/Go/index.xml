<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go - 标签 - DAY By DAY</title><link>liudongdong1.github.io/tags/go/</link><description>Go - 标签 - DAY By DAY</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor><webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="liudongdong1.github.io/tags/go/" rel="self" type="application/rss+xml"/><item><title>go标准库-log</title><link>liudongdong1.github.io/go%E6%A0%87%E5%87%86%E5%BA%93-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/go%E6%A0%87%E5%87%86%E5%BA%93-log/</guid><description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/05/23/13/16/bird-7216181__340.jpg" referrerpolicy="no-referrer">
      </div>// 这个示例程序展示如何使用最基本的log包 package main import ( &#34;log&#34; ) func init() { log.SetPrefix(&#34;TRACE: &#34;) log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile) } func main() { // Println写到标准日志记录器 log.Println(&#34;message&#34;) // Fatalln在调用]]></description></item><item><title>Go规范</title><link>liudongdong1.github.io/go%E8%A7%84%E8%8C%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/go%E8%A7%84%E8%8C%83/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2022/05/25/09/39/animal-7220153__340.jpg" referrerpolicy="no-referrer">
&lt;/div>包中成员以名称首字母大小写决定访问权限。 Public : 首字母大写，可被包外访问； internal : 首字母小写，仅包内成员可以访问； 该规则适用于全局变量、全局常量、类</description></item><item><title>go库-fmt&amp;strconv</title><link>liudongdong1.github.io/go%E5%BA%93-fmtstrconv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/go%E5%BA%93-fmtstrconv/</guid><description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/05/09/17/08/mute-swan-7185076__480.jpg" referrerpolicy="no-referrer">
      </div>package main import &#34;fmt&#34; type Person struct { Name string Age int } func main() { a := 10 s := &#34;hello world&#34; p := Person{Name: &#34;wohu&#34;, Age: 25} c := []int{1, 2, 3, 4} fmt.Printf(&#34;p %%v is %v\n&#34;, p) // p %v is {wohu 25} fmt.Printf(&#34;p %%+v is %+v\n&#34;, p) // p %+v is {Name:wohu Age:25} fmt.Printf(&#34;p %%#v is %#v\n&#34;, p) // p %#v is main.Person{Name:&#34;wohu&#34;, Age:25} fmt.Printf(&#34;p type]]></description></item><item><title>Go语言</title><link>liudongdong1.github.io/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/go/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2022/05/01/15/18/swan-7167802__340.jpg" referrerpolicy="no-referrer">
&lt;/div>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。对于高性能分布式系统领域而言，Go 语言无疑比大多数其</description></item><item><title>GVM</title><link>liudongdong1.github.io/gvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/gvm/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2022/04/11/10/09/apricot-blossoms-7125429__340.jpg" referrerpolicy="no-referrer">
&lt;/div>Go 语言版本管理器（GVM）是管理 Go 语言环境的开源工具。GVM 「pkgsets」 支持安装多个版本的 Go 并管理每个项目的模块。它最初由 Josh Bussdieker 开发，G</description></item><item><title>string操作</title><link>liudongdong1.github.io/string%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/string%E6%93%8D%E4%BD%9C/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2021/07/15/21/25/chaka-salt-lake-6469432__340.jpg" referrerpolicy="no-referrer">
&lt;/div>Go 语言中字符串的内部实现使用 UTF-8 编码，通过 rune 类型，可以方便地对每个 UTF-8 字符进行访问。当然， Go 语言也支持按照传统的 ASCII 码方式逐字符进行访问。 字符串是</description></item><item><title>unsafe</title><link>liudongdong1.github.io/go%E5%BA%93-unsafe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/go%E5%BA%93-unsafe/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2021/11/17/16/40/bike-ride-6804105__340.jpg" referrerpolicy="no-referrer">
&lt;/div>可以绕过 Go 的内存安全机制，直接对内存进行读写。所以有时候出于性能需要，还是会冒险使用它来对内存进行操作。 1. 指针类型转换 unsafe.Pointer 是一种特殊意义的指针</description></item><item><title>安装目录&amp;工作区&amp;源码&amp;命令.md</title><link>liudongdong1.github.io/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%BA%90%E7%A0%81%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%BA%90%E7%A0%81%E5%91%BD%E4%BB%A4/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2022/04/05/10/21/spider-7113290__340.jpg" referrerpolicy="no-referrer">
&lt;/div>GOROOT: Go 语言安装路径。 GOPATH: 若干工作区目录的路径。是我们自己定义的工作空间。在 Go Module 模式之前非常重要，现在基本上用来存放使用 go get 命令获取的项目。 GOBIN: Go 编</description></item><item><title>并发</title><link>liudongdong1.github.io/%E5%B9%B6%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/%E5%B9%B6%E5%8F%91/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2022/05/12/13/04/fresh-strawberries-7191555__340.jpg" referrerpolicy="no-referrer">
&lt;/div>虽然 Go 程序编译后生成的是本地可执行代码，但是这些可执行代码必须运行在Go 语言的运行时（Runtime ）中。Go 运行时类似 Java 和 .NET 语言所用到的虚</description></item><item><title>锁</title><link>liudongdong1.github.io/%E9%94%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/%E9%94%81/</guid><description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2013/05/09/09/06/waves-circles-109964__340.jpg" referrerpolicy="no-referrer">
      </div>1. 竞争状态 // 这个示例程序展示如何在程序里造成竞争状态 // 实际上不希望出现这种情况 package main import ( &#34;fmt&#34; &#34;runtime&#34; &#34;sync&#34; ) var ( // counter是所有goroutine都]]></description></item></channel></rss>