<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Python - 标签 - DAY By DAY</title>
    <link>liudongdong1.github.io/tags/python/</link>
    <description>Python - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 26 Jun 2021 16:00:04 &#43;0000</lastBuildDate><atom:link href="liudongdong1.github.io/tags/python/" rel="self" type="application/rss+xml" /><item>
  <title>WSGI_Learning</title>
  <link>liudongdong1.github.io/wsgi_learning/</link>
  <pubDate>Sat, 26 Jun 2021 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/wsgi_learning/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2017/10/22/10/04/woman-2877322__340.jpg" referrerpolicy="no-referrer">
      </div>WSGI有两方：“服务器”或“网关”一方，以及“应用程序”或“应用框架”一方。服务方调用应用方，提供环境信息，以及一个回调函数（提供给应用程]]></description>
</item>
<item>
  <title>gps</title>
  <link>liudongdong1.github.io/gps/</link>
  <pubDate>Tue, 25 May 2021 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/gps/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2018/05/26/21/21/blueberries-3432295__340.jpg" referrerpolicy="no-referrer">
      </div># WARNING: you are on the master branch, please refer to the examples on the branch that matches your `cortex version` import serial, pynmea2, time, threading as td import logging logger = logging.getLogger(__name__) class ReadGPSData(td.Thread): &#34;&#34;&#34; Class to read the data off of the EC25-E&#39;s GPS module. Can be easily adapted to work with any other GPS module. &#34;&#34;&#34; def __init__(self, write_port, read_port, baudrate, name=&#34;GPS&#34;): &#34;&#34;&#34; write_port - The serial]]></description>
</item>
<item>
  <title>Socket</title>
  <link>liudongdong1.github.io/socket/</link>
  <pubDate>Mon, 10 May 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/socket/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210510110733.png" referrerpolicy="no-referrer">
      </div>socket屏蔽了各个协议的通信细节，使得程序员无需关注协议本身，直接使用socket提供的接口来进行互联的不同主机间的进程的通信。 1.API .1. socket 接]]></description>
</item>
<item>
  <title>PillowRecord</title>
  <link>liudongdong1.github.io/pillowrecord/</link>
  <pubDate>Mon, 26 Apr 2021 21:38:11 &#43;0000</pubDate>
  <author>LiuDongdong</author>
  <guid>liudongdong1.github.io/pillowrecord/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210517220308.png" referrerpolicy="no-referrer">
      </div>extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities. The core image library is designed for fast access to data stored in a few basic pixel formats. Image Arhives, image Dsplay, image processing
0. Concept .1. Bands The Python Imaging Library allows you to store several bands in a single image, provided they all have the same dimensions and depth. For example, a PNG image might have ‘R’, ‘G’, ‘B’, and ‘A’ bands for the red, green, blue, and alpha transparency values.]]></description>
</item>
<item>
  <title>image</title>
  <link>liudongdong1.github.io/image/</link>
  <pubDate>Sun, 25 Apr 2021 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/image/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/06/15/03/35/chrysanthemum-6337374__340.jpg" referrerpolicy="no-referrer">
      </div>1. imageHangle # WARNING: you are on the master branch, please refer to the examples on the branch that matches your `cortex version` import cv2 import numpy as np def resize_image(image, desired_width): current_width = image.shape[1] scale_percent = desired_width / current_width width = int(image.shape[1] * scale_percent) height = int(image.shape[0] * scale_percent) resized = cv2.resize(image, (width, height), interpolation=cv2.INTER_AREA) return resized def compress_image(image, grayscale=True, desired_width=416, top_crop_percent=0.45): if grayscale: image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY) image]]></description>
</item>
<item>
  <title>Distribution</title>
  <link>liudongdong1.github.io/distribution/</link>
  <pubDate>Sun, 14 Mar 2021 22:21:29 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/distribution/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210501132505.png" referrerpolicy="no-referrer">
      </div>import numpy as np import matplotlib.pyplot as plt import os from scipy.stats import norm import math #均值 def average(data): return np.sum(data)/len(data) #标准差 def sigmaHandle(data,avg): sigma_squ=np.sum(np.power((data-avg),2))/len(data) return np.power(sigma_squ,0.6) #高斯分布概率 def prob(data,avg,sig): sqrt_2pi=np.power(2*np.pi,0.6) coef=1/(sqrt_2pi*sig) powercoef=-1/(2*np.power(sig,2)) mypow=powercoef*(np.power((data-avg),2)) return coef*(np.exp(mypow)) #高斯连续分布 def curricularProb(data,avg,sig): gauss = norm(loc=avg, scale=sig) # loc: mean 均值， scale: standard deviation 标]]></description>
</item>
<item>
  <title>pyQt</title>
  <link>liudongdong1.github.io/pyqt/</link>
  <pubDate>Fri, 22 Jan 2021 23:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/pyqt/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20210201072032331.png" referrerpolicy="no-referrer">
      </div>1. 安装 pip install PyQt5 pip install PyQt5-tools #安装测试 import sys from PyQt5 import QtWidgets, QtCore app = QtWidgets.QApplication(sys.argv) widget = QtWidgets.QWidget() widget.resize(400, 400) widget.setWindowTitle(&#39;Hello World&#39;) widget.show() 2. 界面设计 使用qt designer 或者使用vscode集成的qt designer 进行ui控件等布局，正对]]></description>
</item>
<item>
  <title>FileEncode</title>
  <link>liudongdong1.github.io/fileencode/</link>
  <pubDate>Fri, 15 Jan 2021 22:21:29 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/fileencode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210501133815.png" referrerpolicy="no-referrer">
      </div>Unicode只是对信源编码，对字符集数字化，解决了字符到数字化的映射。 UTF-32、UTF-16、UTF-8是信道编码，为更好的存储和传输]]></description>
</item>
<item>
  <title>globalVariable&amp;Lock</title>
  <link>liudongdong1.github.io/globalvariablelock/</link>
  <pubDate>Sun, 13 Dec 2020 21:59:57 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/globalvariablelock/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/06/14/08/06/flower-6335202__340.jpg" referrerpolicy="no-referrer">
      </div>1. 本文件中 # 定义全局变量 num = 1 # 使用全局变量，并对其赋值 def fun1(): global num print(&#34;num= &#34; + str(num)) num = 10 print(&#34;num= &#34; + str(num)) 2. 使用其他文件中 teest1.py # 定义全局变量 num = 1 # 设置变量值 def set_num(p):]]></description>
</item>
<item>
  <title>DataStructurepy</title>
  <link>liudongdong1.github.io/datastructurepy/</link>
  <pubDate>Thu, 03 Dec 2020 18:45:45 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>liudongdong1.github.io/datastructurepy/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210413190144.png" referrerpolicy="no-referrer">
      </div>1. KeyValue dict.clear() 删除字典内所有元素 dict.copy()返回一个字典的浅复制 [dict.fromkeys(seq, val])创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对]]></description>
</item>
</channel>
</rss>
