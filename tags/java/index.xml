<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Java - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/java/</link>
    <description>Java - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 24 Dec 2022 23:31:56 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/java/" rel="self" type="application/rss+xml" /><item>
  <title>Android_性能优化汇总</title>
  <link>https://liudongdong1.github.io/android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
  <pubDate>Sat, 24 Dec 2022 23:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/11/16/15/35/technology-6801334__340.jpg" referrerpolicy="no-referrer">
      </div>性能问题排查： 1.数据埋点上报 2.使用控制台的NetWork、Performance等工具 3.webpack-bundle-analyzer]]></description>
</item>
<item>
  <title>面经_JVM</title>
  <link>https://liudongdong1.github.io/%E9%9D%A2%E7%BB%8F_jvm/</link>
  <pubDate>Mon, 21 Mar 2022 23:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E9%9D%A2%E7%BB%8F_jvm/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/04/20/15/04/hare-6194141__340.jpg" referrerpolicy="no-referrer">
      </div>.1. 简述垃圾回收机制 在 JVM 中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，]]></description>
</item>
<item>
  <title>Android_知识点todo</title>
  <link>https://liudongdong1.github.io/android%E7%9F%A5%E8%AF%86%E7%82%B9todo/</link>
  <pubDate>Fri, 24 Dec 2021 23:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/android%E7%9F%A5%E8%AF%86%E7%82%B9todo/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/11/16/15/35/technology-6801334__340.jpg" referrerpolicy="no-referrer">
      </div>Binder死亡通知机制之linkToDeath：http://gityuan.com/2016/10/03/binder_linktode]]></description>
</item>
<item>
  <title>CommonMath</title>
  <link>https://liudongdong1.github.io/commonmath/</link>
  <pubDate>Wed, 10 Nov 2021 23:21:29 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/commonmath/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/09/25/19/22/animal-6655641__340.jpg" referrerpolicy="no-referrer">
      </div>The Apache Commons Math project is a library of lightweight, self-contained mathematics and statistics components addressing the most common practical problems not immediately available in the Java programming language or commons-lang. 官方案例文档 org.apache.commons.math4.stat - statistics, statistical tests org.apache.commons.math4.analysis - rootfinding, integration, interpolation, polynomials org.apache.commons.math4.random - random numbers, strings and data generation org.apache.commons.math4.special - special functions (Gamma, Beta) org.apache.commons.math4.linear - matrices, solving linear systems org.apache.commons.math4.util -]]></description>
</item>
<item>
  <title>TimeMeasure</title>
  <link>https://liudongdong1.github.io/timemeasure/</link>
  <pubDate>Wed, 03 Nov 2021 18:45:45 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/timemeasure/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/12/07/05/28/bird-6852282__340.jpg" referrerpolicy="no-referrer">
      </div>1. System.currentTimeMillis public class TimeIntervalTest { public static void main(String[] args) throws InterruptedException { // 开始时间 long stime = System.currentTimeMillis(); // 执行时间（1s） Thread.sleep(1000); // 结束时间 long etime = System.currentTimeMillis(); // 计算执行时间 System.out.printf(&#3]]></description>
</item>
<item>
  <title>JavaFloatConvert</title>
  <link>https://liudongdong1.github.io/doublefloatconvert/</link>
  <pubDate>Sun, 10 Oct 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/doublefloatconvert/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/11/28/22/28/rose-leaf-6831355__340.jpg" referrerpolicy="no-referrer">
      </div>Double.floatValue(), Double.doubleValue() 是准确的，但是Float.doubleValue()是不准确的, 单精度转双精度的时候，双精度会对单精度进行补位。导致出现偏差。 Float f=new Float(14.1); System.out.println(f.floatValue()); System.out.println(f.doubleValue());]]></description>
</item>
<item>
  <title>Compreface</title>
  <link>https://liudongdong1.github.io/compreface/</link>
  <pubDate>Wed, 22 Sep 2021 09:00:00 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/compreface/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/CJCMX14Z4F.jpg" referrerpolicy="no-referrer">
      </div>1. usage Step 1. Install and run CompreFace using our Getting Started guide Step 2. sign up for the system and log in. Step 3. Create an application (left section) using the &ldquo;Create&rdquo; link at the bottom of the page. An application is where you can create and manage your Face Collections. Step 4. Enter your application by clicking on its name. Here you will have two options: you can]]></description>
</item>
<item>
  <title>RxJava</title>
  <link>https://liudongdong1.github.io/rxjava/</link>
  <pubDate>Sat, 11 Sep 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rxjava/</guid>
  <description><![CDATA[Rxjava中最重要的其实是Rx思想，所谓的Rx思想，也就是响应式编程思想（下一步随上一步的变化而变化，点菜-&gt;下单-&gt;做菜）。]]></description>
</item>
<item>
  <title>springboot缓存机制</title>
  <link>https://liudongdong1.github.io/springboot%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
  <pubDate>Wed, 18 Aug 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/springboot%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/QSUEDKLFWO.jpg" referrerpolicy="no-referrer">
      </div>Spring从3.1开始定义了org.springframework.cache.Cache和org.springframework.cac]]></description>
</item>
<item>
  <title>StreamPipeline</title>
  <link>https://liudongdong1.github.io/streampipline/</link>
  <pubDate>Thu, 12 Aug 2021 23:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/streampipline/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/0LTBEMWP0T.jpg" referrerpolicy="no-referrer">
      </div>如果出于性能考虑，1. 对于简单操作推荐使用外部迭代手动实现，2. 对于复杂操作，推荐使用Stream API， 3. 在多核情况下，推荐使用并行Str]]></description>
</item>
</channel>
</rss>
