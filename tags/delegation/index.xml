<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Delegation - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/delegation/</link>
    <description>Delegation - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 15 Mar 2021 09:59:57 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/delegation/" rel="self" type="application/rss+xml" /><item>
  <title>DecoratorMode</title>
  <link>https://liudongdong1.github.io/decoratormode/</link>
  <pubDate>Mon, 15 Mar 2021 09:59:57 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/decoratormode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/NEYZ549NTT.jpg" referrerpolicy="no-referrer">
      </div>装饰者模式(Decorator Pattern)：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模]]></description>
</item>
<item>
  <title>Delegation</title>
  <link>https://liudongdong1.github.io/delegationmode/</link>
  <pubDate>Tue, 02 Mar 2021 09:59:57 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/delegationmode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/UJVB2QEHNH.jpg" referrerpolicy="no-referrer">
      </div>委派模式(Delegate Pattern ) 又叫委托模式， 是一种面向对象的设计模式， 允许对象组合实现与 继承相同的代码重用。它的基本作用就是负责任务的调用和]]></description>
</item>
</channel>
</rss>
