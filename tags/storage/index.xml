<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Storage - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/storage/</link>
    <description>Storage - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/storage/" rel="self" type="application/rss+xml" /><item>
  <title>SPDK存储引擎-Blobstore&amp;BlobFs</title>
  <link>https://liudongdong1.github.io/spdk%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-blobstoreblobfs/</link>
  <pubDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-blobstoreblobfs/</guid>
  <description><![CDATA[Blobstore是位于SPDK bdev之上的Blob管理层，用于与用户态文件系统Blobstore Filesystem （BlobFS）集成，从而代替传统的文]]></description>
</item>
<item>
  <title>文件系统Fuse</title>
  <link>https://liudongdong1.github.io/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-fuse/</link>
  <pubDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-fuse/</guid>
  <description><![CDATA[filesystem types: 文件系统类型 superblock: 整个文件系统的元信息 inode: 单个文件的元信息 dentry: 目录项，一个文件目录对应一个dentry file: 进程打开的一个文件 基于块设备的文件系统(]]></description>
</item>
<item>
  <title>Kubernetes-_存储-ceph</title>
  <link>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8-ceph/</link>
  <pubDate>Sun, 24 Jul 2022 22:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8-ceph/</guid>
  <description><![CDATA[一个 Ceph 存储集群至少需要一个 Ceph Monitor（监视器）、Ceph Manager（管理） 和 Ceph OSD（对象存储守护进程）。 Monitors：Cep]]></description>
</item>
<item>
  <title>PMDK-libpmemlog教程</title>
  <link>https://liudongdong1.github.io/pmdk-libpmemlog%E6%A1%88%E4%BE%8B/</link>
  <pubDate>Thu, 30 Jun 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-libpmemlog%E6%A1%88%E4%BE%8B/</guid>
  <description><![CDATA[pmemlog_create() // 创建持久化的log内存 pmemlog_open() // 打开已创建的log内存 pmemlog_nbyte() // 获得某log内存内可以添加多少位的数据，而非多少条记录 pmemlog_append() // 向log内存中append]]></description>
</item>
<item>
  <title>PMDK-libpmemobj教程</title>
  <link>https://liudongdong1.github.io/pmdk-libpmemobj%E6%95%99%E7%A8%8B/</link>
  <pubDate>Thu, 30 Jun 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-libpmemobj%E6%95%99%E7%A8%8B/</guid>
  <description><![CDATA[Write &amp;Read PMEMobjpool pmemobj_create() // 创建持久化内存池 PMEMobjpool pmemobj_open() // 打开已创建的持久化内存池 PMEMoid pmemobj_root() // 得到持久化内存池的根节点 pmemobj_direct() // 得到根节点的指针 pmemobj_persist() // 将单变量进行持久化存储 pmemobj_memcpy_persist() // 将数]]></description>
</item>
<item>
  <title>SPDK_IO 流程</title>
  <link>https://liudongdong1.github.io/spdk-io%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Sun, 29 May 2022 20:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk-io%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[首先，从虚拟机视角来说，它看到的是一个virtio-blk-pci设备，该pci设备内部包含一条virtio总线，其上又连接了virtio-]]></description>
</item>
<item>
  <title>SPDK_IO栈&amp;线程对比</title>
  <link>https://liudongdong1.github.io/spdk-io%E6%A0%88%E7%BA%BF%E7%A8%8B%E5%AF%B9%E6%AF%94/</link>
  <pubDate>Sun, 29 May 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk-io%E6%A0%88%E7%BA%BF%E7%A8%8B%E5%AF%B9%E6%AF%94/</guid>
  <description><![CDATA[IO栈对比 无论使用传统内核NVMe驱动，还是使用vhost，虚拟机内部的IO处理流程都是一样的：IO请求下发时需要从用户态应用程序中切换到内]]></description>
</item>
<item>
  <title>mysql 索引结构</title>
  <link>https://liudongdong1.github.io/mysql-%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/</link>
  <pubDate>Tue, 10 May 2022 22:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/mysql-%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/</guid>
  <description><![CDATA[Innodb 架构 Buffer Pool 用于加速读 Change Buffer 用于没有非唯一索引的加速写 Log Buffer 用于加速redo log写 自适应Hash索引主要用于加快查询页。在查询时，Innodb通]]></description>
</item>
<item>
  <title>mysql 索引结构</title>
  <link>https://liudongdong1.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/</link>
  <pubDate>Tue, 10 May 2022 22:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/</guid>
  <description><![CDATA[Innodb 架构 Buffer Pool 用于加速读 Change Buffer 用于没有非唯一索引的加速写 Log Buffer 用于加速redo log写 自适应Hash索引主要用于加快查询页。在查询时，Innodb通]]></description>
</item>
<item>
  <title>PMDK-paper</title>
  <link>https://liudongdong1.github.io/pmdk-paper/</link>
  <pubDate>Sat, 30 Apr 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-paper/</guid>
  <description><![CDATA[Paper: MOSIQS Summary a persistent memory object storage framework with metadata indexing and querying for scientific computing MOSIQS provides an aggregate memory pool atop an array of persistent memory devices to store and access memory objects. MOSIQS uses a lightweight persistent memory key-value store to manage the metadata of memory objects such as persistent pointer mappings Challenge access, select and share a PMO without additional descriptive metadata.
PMOs are memory allocated objects and can only be accessed and shared via persistent pointers.]]></description>
</item>
</channel>
</rss>
