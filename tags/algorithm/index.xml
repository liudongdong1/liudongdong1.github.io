<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>algorithm - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/algorithm/</link>
    <description>algorithm - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 14 Apr 2021 21:38:11 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/algorithm/" rel="self" type="application/rss+xml" /><item>
  <title>SkLearn Evaluation</title>
  <link>https://liudongdong1.github.io/sklearn-evaluation/</link>
  <pubDate>Wed, 14 Apr 2021 21:38:11 &#43;0000</pubDate>
  <author>LiuDongdong</author>
  <guid>https://liudongdong1.github.io/sklearn-evaluation/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210501113504.png" referrerpolicy="no-referrer">
      </div>1. Cross-validation cross_val_score from sklearn.model_selection import cross_val_score clf = svm.SVC(kernel=&#39;linear&#39;, C=1, random_state=42) scores = cross_val_score(clf, X, y, cv=5，scoring=&#39;f1_macro&#39;) print(&#34;%0.2f accuracy with a standard deviation of %0.2f&#34; % (scores.mean(), scores.std())) from sklearn import preprocessing X_train, X_test, y_train, y_test = train_test_split(]]></description>
</item>
<item>
  <title>SkLearnVisualization</title>
  <link>https://liudongdong1.github.io/sklearnvisualization/</link>
  <pubDate>Wed, 14 Apr 2021 21:38:11 &#43;0000</pubDate>
  <author>LiuDongdong</author>
  <guid>https://liudongdong1.github.io/sklearnvisualization/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210522212757.png" referrerpolicy="no-referrer">
      </div>1. cross-validation（ROC) print(__doc__) import numpy as np import matplotlib.pyplot as plt from sklearn import svm, datasets from sklearn.metrics import auc from sklearn.metrics import plot_roc_curve from sklearn.model_selection import StratifiedKFold # ############################################################################# # Data IO and generation # Import some data to play with iris = datasets.load_iris() X = iris.data y = iris.target X, y = X[y != 2], y[y != 2] n_samples, n_features = X.shape # Add noisy features random_state = np.]]></description>
</item>
<item>
  <title>SkLearn Optimize</title>
  <link>https://liudongdong1.github.io/sklearn-optimize/</link>
  <pubDate>Wed, 14 Apr 2021 08:38:11 &#43;0000</pubDate>
  <author>LiuDongdong</author>
  <guid>https://liudongdong1.github.io/sklearn-optimize/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210501113542.png" referrerpolicy="no-referrer">
      </div>使用scikit-learn时提高速度的三种主要方法是：使用joblib和Ray并行化或分发培训，使用不同的超参数优化技术（网格搜索，随机搜]]></description>
</item>
<item>
  <title>ReduceDimension</title>
  <link>https://liudongdong1.github.io/reducedimension/</link>
  <pubDate>Tue, 23 Mar 2021 16:22:21 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/reducedimension/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210501111547.png" referrerpolicy="no-referrer">
      </div>1. 降维算法总结 降维算法 资料链接 代码 展示 PCA 资料链接１ 资料链接２ 资料链接３ PCA KPCA 资料链接1 资料链接2 资料链接3 KPCA LDA 资料链接１ 资料链接2 LDA MDS 资料链接]]></description>
</item>
<item>
  <title>Non-maximumSuppression</title>
  <link>https://liudongdong1.github.io/non-maximumsuppression/</link>
  <pubDate>Wed, 19 Aug 2020 21:59:57 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/non-maximumsuppression/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/blue-abstract-glass-balls.jpg" referrerpolicy="no-referrer">
      </div>NMS: Input: A list of Proposal boxes B, corresponding confidence scores S and overlap threshold N. Output: A list of filtered proposals D. Algorithm: Select the proposal with highest confidence score, remove it from B and add it to the final proposal list D. (Initially D is empty). Now compare this proposal with all the proposals — calculate the IOU (Intersection over Union) of this proposal with every other proposal.]]></description>
</item>
</channel>
</rss>
