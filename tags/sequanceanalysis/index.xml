<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>SequanceAnalysis - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/sequanceanalysis/</link>
    <description>SequanceAnalysis - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 30 Jun 2020 16:00:04 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/sequanceanalysis/" rel="self" type="application/rss+xml" /><item>
  <title>Wavelet</title>
  <link>https://liudongdong1.github.io/wavelet/</link>
  <pubDate>Tue, 30 Jun 2020 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/wavelet/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210521110253.png" referrerpolicy="no-referrer">
      </div>Fourier Transform is the dot product between real signal and various frequency of sine wave. We get a stats of frequency but we don&rsquo;t know when that “frequency” happen, we lost the time resolution of the real signal. To get both frequency and time resolution we can be dividing the original signal into several parts and apply Fourier Transform to]]></description>
</item>
<item>
  <title>DTW&amp;Sequence Analysis</title>
  <link>https://liudongdong1.github.io/dtw-sequence-analysis/</link>
  <pubDate>Wed, 27 May 2020 09:35:14 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/dtw-sequence-analysis/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/source-2147529__340.jpg" referrerpolicy="no-referrer">
      </div>level: SIGKDD ACM author:Thanawin Rakthanmanon date: August 12–16, 2012 keyword: Sequence data matching Paper: DTW Research Objective Application Area: time series motif discovery [25] [26], anomaly detection [35] [31], time series summarization, shapelet extraction [39], clustering, and classification [6], gestures/brainwaves/musical patterns/anomalous heartbeats in real-time Purpose: fast sequential search instead of approximately search Proble Statement Time Series Subsequences must be Normalized ，or tiny changes]]></description>
</item>
<item>
  <title>StreamAnalyse-BloomFilter</title>
  <link>https://liudongdong1.github.io/streamanalyse-bloomfilter/</link>
  <pubDate>Sun, 26 Apr 2020 15:01:53 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/streamanalyse-bloomfilter/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/images.png" referrerpolicy="no-referrer">
      </div>A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton Howard Bloom in 1970, that is used to test whether an element is a member of a set. a query returns either &ldquo;possibly in set&rdquo; or &ldquo;definitely not in set&rdquo;. the shortcoming of this structure is that the more elements that are added to the set, the larger the probability of false positives. and , Bloom filters do]]></description>
</item>
<item>
  <title>AnomalyDetection</title>
  <link>https://liudongdong1.github.io/anomalydetection/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/anomalydetection/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210521110349.png" referrerpolicy="no-referrer">
      </div>异常检测（Anomaly Detection 或 Outlier Detection）指的是通过数据挖掘手段识别数据中的“异常点”. 1.异常类型 .1. 单点异常 单点异常（Global]]></description>
</item>
<item>
  <title>DimsTransfor</title>
  <link>https://liudongdong1.github.io/dimstransfor/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/dimstransfor/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/71.jpeg" referrerpolicy="no-referrer">
      </div>1. 一维时间序列转化二维图片 1.1. Gramian Angular Field (GAF) 使用一个限定在 [-1,1] 的最小-最大定标器（Min-Max scaler）来把时间序列缩放到 [-1,1] 里，这样做的原因是为]]></description>
</item>
<item>
  <title>DTWClassification</title>
  <link>https://liudongdong1.github.io/dtwclassification/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/dtwclassification/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/XKJHPNYZOF.jpg" referrerpolicy="no-referrer">
      </div># !pip3.9 install dtaidistance # !pip3.9 install numpy # !pip3.9 install matplotlib from dtaidistance import dtw from dtaidistance import dtw_visualisation as dtwvis from random import sample import numpy as np import matplotlib.pyplot as plt x = np.arange(0, 20, .5) s1 = np.sin(x) s2 = np.sin(x - 1) path = dtw.warping_path(s1, s2) dtwvis.plot_warping(s1, s2, path) distance = dtw.distance(s1, s2) d, paths = dtw.warping_paths(s1, s2, window=20) best_path = dtw.best_path(paths) dtwvis.plot_warpingpaths(s1, s2, paths,]]></description>
</item>
<item>
  <title>Merlion_Framework</title>
  <link>https://liudongdong1.github.io/merlion_framework/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/merlion_framework/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/NSTHHXBQTL.jpg" referrerpolicy="no-referrer">
      </div>首先时间序列的任务主要包括时间序列异常点检测及时间序列的预测，其中时间序列的预测又包括单变量时间序列预测，和多变量时间序列预测。在时间序列预]]></description>
</item>
<item>
  <title>ShapeMatch</title>
  <link>https://liudongdong1.github.io/shapematch/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/shapematch/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/landscape-mountains-nature-lake-1.jpg" referrerpolicy="no-referrer">
      </div>1. Image Moments Calculation 1.1. raw moments 1.2. central moments the central moments are translation invariant, no matter where the blob is in the image, if the shape is the same, the moment will be the same. 1.3. Normalized central moments both translation and scale invariant. 2. Hu Moments Hu Moments are a set of 7 numbers calculated using central moments that are invariant to image transformations, the first 6]]></description>
</item>
<item>
  <title>TimeSeqence</title>
  <link>https://liudongdong1.github.io/timesequence/</link>
  <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/timesequence/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/20210521113411.png" referrerpolicy="no-referrer">
      </div>1. 时序特征 tsfresh是开源的提取时序数据特征的python包，能够提取出超过64种特征. 时间序列统计特征：最大值、最小值、值域、均值、中]]></description>
</item>
</channel>
</rss>
