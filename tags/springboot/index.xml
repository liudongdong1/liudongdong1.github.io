<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SpringBoot - 标签 - DAY By DAY</title><link>liudongdong1.github.io/tags/springboot/</link><description>SpringBoot - 标签 - DAY By DAY</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor><webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 18 Aug 2021 21:31:56 +0000</lastBuildDate><atom:link href="liudongdong1.github.io/tags/springboot/" rel="self" type="application/rss+xml"/><item><title>springboot缓存机制</title><link>liudongdong1.github.io/springboot%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 18 Aug 2021 21:31:56 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springboot%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.stocksnap.io/img-thumbs/280h/QSUEDKLFWO.jpg" referrerpolicy="no-referrer">
&lt;/div>Spring从3.1开始定义了org.springframework.cache.Cache和org.springframework.cac</description></item><item><title>SpringLog</title><link>liudongdong1.github.io/springlog/</link><pubDate>Mon, 28 Jun 2021 22:31:56 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springlog/</guid><description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2015/01/02/10/47/search-engine-optimization-586422__340.jpg" referrerpolicy="no-referrer">
      </div>Logback is one of the most widely used logging frameworks in the Java Community. It&rsquo;s a replacement for its predecessor, Log4j. Logback offers a faster implementation than Log4j, provides more options for configuration, and more flexibility in archiving old log files. slf4j是一系列的日志接口，而log4j和logback]]></description></item><item><title>SpringActuator</title><link>liudongdong1.github.io/springactuator/</link><pubDate>Sun, 27 Jun 2021 22:31:56 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springactuator/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2016/06/03/13/57/digital-marketing-1433427__340.jpg" referrerpolicy="no-referrer">
&lt;/div>Spring Boot Actuator 模块提供了生产级别的功能，比如健康检查，审计，指标收集，HTTP 跟踪等，帮助我们监控和管理Spring Boot 应用。这个模块是一个采集应用内</description></item><item><title>SpringAdmin</title><link>liudongdong1.github.io/springadmin/</link><pubDate>Sun, 27 Jun 2021 22:31:56 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springadmin/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2018/01/04/11/38/spider-web-3060448__340.jpg" referrerpolicy="no-referrer">
&lt;/div>Spring Boot Actuator 的使用，Spring Boot Actuator 提供了对单个 Spring Boot 的监控，信息包含：应用状态、内存、线程、堆栈等等，比较全面的监控了 Spring Boot 应用的整个生命周期。 Spring Boot</description></item><item><title>SpringProperties</title><link>liudongdong1.github.io/springproperties/</link><pubDate>Sun, 27 Jun 2021 21:31:56 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springproperties/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2019/11/07/01/42/nature-4607496__340.jpg" referrerpolicy="no-referrer">
&lt;/div>1. application.properties配置 |--src |--main |--resources |--application.properties #启用调试日志。 debug=false #启用跟踪日志。 trace=false #-------------------------------------- # LOGGING 日记 #-------------------------------------- # 日志配置文件的位置。 例如，Log</description></item><item><title>Annotation_basic</title><link>liudongdong1.github.io/annotation_basic/</link><pubDate>Sun, 27 Jun 2021 16:00:04 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/annotation_basic/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2018/10/05/09/45/cobweb-3725540__340.jpg" referrerpolicy="no-referrer">
&lt;/div>java注解是JDK1.5引入的一种注释机制，java语言的类、方法、变量、参数和包都可以被注解标注。和Javadoc不同，java注解可以</description></item><item><title>SpringException</title><link>liudongdong1.github.io/springexception/</link><pubDate>Sun, 27 Jun 2021 16:00:04 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springexception/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2021/06/02/15/25/daisy-6304767__340.jpg" referrerpolicy="no-referrer">
&lt;/div>Spring MVC 通过 HandlerExceptionResolver 处理程序的异常，包括 Handler映射、数据绑定以及目标方法执行 时发生的异常。SpringMVC 提供的 HandlerExceptionResolver 的实现类 1. 全局异常捕获处理</description></item><item><title>SpringWebEngine</title><link>liudongdong1.github.io/springwebengine/</link><pubDate>Sun, 27 Jun 2021 16:00:04 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springwebengine/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2016/12/14/09/40/facebook-1905890__340.jpg" referrerpolicy="no-referrer">
&lt;/div>1. Freemarker https://blog.csdn.net/weixin_43848040/article/details/112257113 2. Thymeleaf 3. Beetl 4. Enjoy</description></item><item><title>SpringAnnotation</title><link>liudongdong1.github.io/springannotation/</link><pubDate>Sat, 19 Jun 2021 21:31:56 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springannotation/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2021/05/27/14/40/anemone-6288318__340.jpg" referrerpolicy="no-referrer">
&lt;/div>1. @SpringBootApplication @SpringBootApplication public class SpringSecurityJwtGuideApplication { public static void main(java.lang.String[] args) { SpringApplication.run(SpringSecurityJwtGuideApplication.class, args); } } 我们可以把 @SpringBootApplication看作是 @Configuration、@EnableA</description></item><item><title>springbootAOP</title><link>liudongdong1.github.io/springaop/</link><pubDate>Fri, 18 Jun 2021 21:31:56 +0000</pubDate><author>liudongdong1</author><guid>liudongdong1.github.io/springaop/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2015/11/07/11/32/laptop-1031224__340.jpg" referrerpolicy="no-referrer">
&lt;/div>OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP只允许开发者定义纵向的关系，但并不适合定义横向</description></item></channel></rss>