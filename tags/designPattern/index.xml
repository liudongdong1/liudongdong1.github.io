<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>DesignPattern - 标签 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/tags/designpattern/</link>
    <description>DesignPattern - 标签 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 15 Aug 2021 23:31:56 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/tags/designpattern/" rel="self" type="application/rss+xml" /><item>
  <title>微服务5种设计</title>
  <link>https://liudongdong1.github.io/%E5%BE%AE%E6%9C%8D%E5%8A%A15%E7%A7%8D%E8%AE%BE%E8%AE%A1/</link>
  <pubDate>Sun, 15 Aug 2021 23:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E5%BE%AE%E6%9C%8D%E5%8A%A15%E7%A7%8D%E8%AE%BE%E8%AE%A1/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/wheat-field_I10ZDYCG1P.jpg" referrerpolicy="no-referrer">
      </div>整个应用程序被拆分成相互独立但包含多个内部模块的子进程。 与模块化的单体应用（Modular Monoliths）或 SOA 相反，微服务应用程序根据业]]></description>
</item>
<item>
  <title>CodeRegulation</title>
  <link>https://liudongdong1.github.io/coderegulation/</link>
  <pubDate>Sat, 07 Aug 2021 12:59:57 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/coderegulation/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210510221051.png" referrerpolicy="no-referrer">
      </div>先进行需求分析和系统设计，这样可以帮助我们正确的理解功能，然后再开发代码，在开发时应该边开发编写测试代码，保证开发的函数功能是正确的，否则都]]></description>
</item>
<item>
  <title>常用注意代码</title>
  <link>https://liudongdong1.github.io/%E5%B8%B8%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BB%A3%E7%A0%81/</link>
  <pubDate>Sat, 07 Aug 2021 12:59:57 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E5%B8%B8%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BB%A3%E7%A0%81/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/5KV02LKPEL.jpg" referrerpolicy="no-referrer">
      </div>一、MyBatis 不要为了多个查询条件而写 1 = 1 当遇到多个查询条件，使用where 1=1 可以很方便的解决我们的问题，但是这样很可能会造成非常大的]]></description>
</item>
<item>
  <title>DDD 设计实践</title>
  <link>https://liudongdong1.github.io/ddd%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</link>
  <pubDate>Thu, 05 Aug 2021 23:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/ddd%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/VTOEOEWR8J.jpg" referrerpolicy="no-referrer">
      </div>1. 基于SpringMVC+mybatis User Interface层：门面层，对外以各种协议提供服务，该层需要明确定义支持的服务协议、契约等。包含]]></description>
</item>
<item>
  <title>DDD 设计理念</title>
  <link>https://liudongdong1.github.io/ddd%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/</link>
  <pubDate>Thu, 05 Aug 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/ddd%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/V9L6XXK3LB.jpg" referrerpolicy="no-referrer">
      </div>微服务架构，在集中式架构中，系统分析、设计和开发往往是独立进行的，而且各个阶段负责人可能不一样，那么就涉及到交流信息丢失的问题， 另外项目从分]]></description>
</item>
<item>
  <title>CompositeMode</title>
  <link>https://liudongdong1.github.io/compositemode/</link>
  <pubDate>Mon, 05 Jul 2021 11:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/compositemode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210514222616.png" referrerpolicy="no-referrer">
      </div>组合模式(Composite Pattern)：组合多个对象形成树形结构以表示具有 &ldquo;整体—部分&rdquo; 关系的层次结构。组合模]]></description>
</item>
<item>
  <title>FlyweightMode</title>
  <link>https://liudongdong1.github.io/flyweightmode/</link>
  <pubDate>Sat, 03 Jul 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/flyweightmode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210514222616.png" referrerpolicy="no-referrer">
      </div>运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求]]></description>
</item>
<item>
  <title>javaDoc</title>
  <link>https://liudongdong1.github.io/javadoc/</link>
  <pubDate>Mon, 07 Jun 2021 12:59:57 &#43;0000</pubDate>
  <author>LiuDongdong</author>
  <guid>https://liudongdong1.github.io/javadoc/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2016/11/04/21/34/beach-1799006_640.jpg" referrerpolicy="no-referrer">
      </div>第一段：概要描述，通常用一句或者一段话简要描述该类的作用，以英文句号作为结束 第二段：详细描述，通常用一段或者多段话来详细描述该类的作用，一般]]></description>
</item>
<item>
  <title>FactorMode</title>
  <link>https://liudongdong1.github.io/factormode/</link>
  <pubDate>Sun, 23 May 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/factormode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://lddpicture.oss-cn-beijing.aliyuncs.com/picture/20210514222616.png" referrerpolicy="no-referrer">
      </div>1. 工厂方法 在工厂方法模式中，抽象产品类Product负责定义产品的共性，事项对事物最抽象的定义，Creator为抽象创建类，也就是抽象工厂，]]></description>
</item>
<item>
  <title>MediatorMode</title>
  <link>https://liudongdong1.github.io/mediatormode/</link>
  <pubDate>Sun, 23 May 2021 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/mediatormode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/purple-flowers_HFVKAB39RI.jpg" referrerpolicy="no-referrer">
      </div>提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。 中介者模式简化了对象之间的交互，它用中介者和同事的一对多交互代]]></description>
</item>
</channel>
</rss>
