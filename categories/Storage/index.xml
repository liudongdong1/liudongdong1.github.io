<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Storage - 分类 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/categories/storage/</link>
    <description>Storage - 分类 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 02 Aug 2022 22:00:04 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/categories/storage/" rel="self" type="application/rss+xml" /><item>
  <title>Kubernetes_存储流程详解</title>
  <link>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
  <pubDate>Tue, 02 Aug 2022 22:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/L358DEKDZZ.jpg" referrerpolicy="no-referrer">
      </div>1.流程概览 流程如下： 用户创建了一个包含 PVC 的 Pod，该 PVC 要求使用动态存储卷； Scheduler 根据 Pod 配置、节点状态、PV 配置等信息，把 Pod 调度到一个合适的 Worker 节]]></description>
</item>
<item>
  <title>Kubernetes-存储NFS实践</title>
  <link>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8nfs%E5%AE%9E%E8%B7%B5/</link>
  <pubDate>Mon, 01 Aug 2022 22:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8nfs%E5%AE%9E%E8%B7%B5/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/FYY46JHNIQ.jpg" referrerpolicy="no-referrer">
      </div>一、storage存储原理 二、storage存储实战 2.1 安装nfs存储集群 #所有机器安装 yum install -y nfs-utils #nfs主节点 echo &#34;/nfs/data/ *(insecure,rw,sync,no_root_squash)&#34; &gt; /etc/exports mkdir -p /nfs/data systemctl enable rpcbind --now systemctl enable nfs-server --now]]></description>
</item>
<item>
  <title>Kubernetes-存储介绍</title>
  <link>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8%E4%BB%8B%E7%BB%8D/</link>
  <pubDate>Mon, 01 Aug 2022 22:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8%E4%BB%8B%E7%BB%8D/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/08/25/05/01/boat-6572384__340.jpg" referrerpolicy="no-referrer">
      </div>Docker插件机制-架构&amp;评价 Docker volumn 插件 名称 描述 地址 Azure File Storage plugin Lets you mount Microsoft Azure File Storage shares to Docker containers as volumes using the SMB 3.0 protocol. Learn more. https://github.com/Azure/azurefile dockervolumedriver BeeGFS Volume Plugin An open source volume plugin to create persistent volumes in a]]></description>
</item>
<item>
  <title>SPDK存储引擎-Blobstore&amp;BlobFs</title>
  <link>https://liudongdong1.github.io/spdk%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-blobstoreblobfs/</link>
  <pubDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-blobstoreblobfs/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/YVXGN1ZZUY.jpg" referrerpolicy="no-referrer">
      </div>Blobstore是位于SPDK bdev之上的Blob管理层，用于与用户态文件系统Blobstore Filesystem （BlobFS）集成，从而代替传统的文]]></description>
</item>
<item>
  <title>文件系统Fuse</title>
  <link>https://liudongdong1.github.io/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-fuse/</link>
  <pubDate>Sat, 30 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-fuse/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/BOBHXEW8HR.jpg" referrerpolicy="no-referrer">
      </div>filesystem types: 文件系统类型 superblock: 整个文件系统的元信息 inode: 单个文件的元信息 dentry: 目录项，一个文件目录对应一个dentry file: 进程打开的一个文件 基于块设备的文件系统(]]></description>
</item>
<item>
  <title>Kubernetes-_存储-ceph</title>
  <link>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8-ceph/</link>
  <pubDate>Sun, 24 Jul 2022 22:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/kubernetes_%E5%AD%98%E5%82%A8-ceph/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/UD37GOHJLR.jpg" referrerpolicy="no-referrer">
      </div>一个 Ceph 存储集群至少需要一个 Ceph Monitor（监视器）、Ceph Manager（管理） 和 Ceph OSD（对象存储守护进程）。 Monitors：Cep]]></description>
</item>
<item>
  <title>PMDK-libpmemlog教程</title>
  <link>https://liudongdong1.github.io/pmdk-libpmemlog%E6%A1%88%E4%BE%8B/</link>
  <pubDate>Thu, 30 Jun 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-libpmemlog%E6%A1%88%E4%BE%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/KOGR7JW66X.jpg" referrerpolicy="no-referrer">
      </div>pmemlog_create() // 创建持久化的log内存 pmemlog_open() // 打开已创建的log内存 pmemlog_nbyte() // 获得某log内存内可以添加多少位的数据，而非多少条记录 pmemlog_append() // 向log内存中append]]></description>
</item>
<item>
  <title>PMDK-libpmemobj教程</title>
  <link>https://liudongdong1.github.io/pmdk-libpmemobj%E6%95%99%E7%A8%8B/</link>
  <pubDate>Thu, 30 Jun 2022 19:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/pmdk-libpmemobj%E6%95%99%E7%A8%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/MJB9NMEYJR.jpg" referrerpolicy="no-referrer">
      </div>Write &amp;Read PMEMobjpool pmemobj_create() // 创建持久化内存池 PMEMobjpool pmemobj_open() // 打开已创建的持久化内存池 PMEMoid pmemobj_root() // 得到持久化内存池的根节点 pmemobj_direct() // 得到根节点的指针 pmemobj_persist() // 将单变量进行持久化存储 pmemobj_memcpy_persist() // 将数]]></description>
</item>
<item>
  <title>SPDK_IO 流程</title>
  <link>https://liudongdong1.github.io/spdk-io%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Sun, 29 May 2022 20:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk-io%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/MJCHXGTPJX.jpg" referrerpolicy="no-referrer">
      </div>首先，从虚拟机视角来说，它看到的是一个virtio-blk-pci设备，该pci设备内部包含一条virtio总线，其上又连接了virtio-]]></description>
</item>
<item>
  <title>SPDK_IO栈&amp;线程对比</title>
  <link>https://liudongdong1.github.io/spdk-io%E6%A0%88%E7%BA%BF%E7%A8%8B%E5%AF%B9%E6%AF%94/</link>
  <pubDate>Sun, 29 May 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/spdk-io%E6%A0%88%E7%BA%BF%E7%A8%8B%E5%AF%B9%E6%AF%94/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/IJWJDIWG0Z.jpg" referrerpolicy="no-referrer">
      </div>IO栈对比 无论使用传统内核NVMe驱动，还是使用vhost，虚拟机内部的IO处理流程都是一样的：IO请求下发时需要从用户态应用程序中切换到内]]></description>
</item>
</channel>
</rss>
