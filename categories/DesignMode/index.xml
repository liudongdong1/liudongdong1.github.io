<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>DesignMode - 分类 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/categories/designmode/</link>
    <description>DesignMode - 分类 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 24 Mar 2022 23:31:56 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/categories/designmode/" rel="self" type="application/rss+xml" /><item>
  <title>面经_docker</title>
  <link>https://liudongdong1.github.io/%E9%9D%A2%E7%BB%8F_docker/</link>
  <pubDate>Thu, 24 Mar 2022 23:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E9%9D%A2%E7%BB%8F_docker/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/03/21/08/49/salix-caprea-7082638__340.jpg" referrerpolicy="no-referrer">
      </div>Docker 容器是轻量级的虚拟技术，占用更少系统资源。 使用 Docker 容器，不同团队（如开发、测试，运维）之间更容易合作。 可以在任何地方部署 Docker 容器，比如在任何物]]></description>
</item>
<item>
  <title>云计算课程</title>
  <link>https://liudongdong1.github.io/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%BE%E7%A8%8B/</link>
  <pubDate>Fri, 02 Apr 2021 21:00:00 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/%E4%BA%91%E8%AE%A1%E7%AE%97%E8%AF%BE%E7%A8%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/DBJ0PLZH0E.jpg" referrerpolicy="no-referrer">
      </div>计算设备也称为计算资源，计算资源包括 CPU、内存、硬盘和网络。而在机房中，磁盘只是存储大类中的一种，存储还包括磁带库、阵列、SAN、NAS 等]]></description>
</item>
<item>
  <title>DecoratorMode</title>
  <link>https://liudongdong1.github.io/decoratormode/</link>
  <pubDate>Mon, 15 Mar 2021 09:59:57 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/decoratormode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/NEYZ549NTT.jpg" referrerpolicy="no-referrer">
      </div>装饰者模式(Decorator Pattern)：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模]]></description>
</item>
<item>
  <title>SingletonMode</title>
  <link>https://liudongdong1.github.io/singletonmode/</link>
  <pubDate>Tue, 02 Mar 2021 12:59:57 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/singletonmode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/03/19/04/49/kid-6106557__340.jpg" referrerpolicy="no-referrer">
      </div>单例模式也就是保证一个类只有一个实例的一种实现方法罢了(设计模式其实就是帮助我们解决实际开发过程中的方法, 该方法是为了降低对象之间的耦合度,]]></description>
</item>
<item>
  <title>AdaptionMode</title>
  <link>https://liudongdong1.github.io/adaptionmode/</link>
  <pubDate>Tue, 02 Mar 2021 09:59:57 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/adaptionmode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/laptop-keyboard_NSTHHXBQTL.jpg" referrerpolicy="no-referrer">
      </div>将一个类的接口转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以相互合作。这个定义还好，说适配器的功能就是把一个接口转成另一个接口。]]></description>
</item>
<item>
  <title>Delegation</title>
  <link>https://liudongdong1.github.io/delegationmode/</link>
  <pubDate>Tue, 02 Mar 2021 09:59:57 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/delegationmode/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/UJVB2QEHNH.jpg" referrerpolicy="no-referrer">
      </div>委派模式(Delegate Pattern ) 又叫委托模式， 是一种面向对象的设计模式， 允许对象组合实现与 继承相同的代码重用。它的基本作用就是负责任务的调用和]]></description>
</item>
</channel>
</rss>
