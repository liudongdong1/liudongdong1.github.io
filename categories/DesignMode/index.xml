<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>DesignMode - 分类 - DAY By DAY</title><link>liudongdong1.github.io/categories/designmode/</link><description>DesignMode - 分类 - DAY By DAY</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor><webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 15 Mar 2021 09:59:57 +0000</lastBuildDate><atom:link href="liudongdong1.github.io/categories/designmode/" rel="self" type="application/rss+xml"/><item><title>DecoratorMode</title><link>liudongdong1.github.io/decoratormode/</link><pubDate>Mon, 15 Mar 2021 09:59:57 +0000</pubDate><author>liudongdong</author><guid>liudongdong1.github.io/decoratormode/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.stocksnap.io/img-thumbs/280h/NEYZ549NTT.jpg" referrerpolicy="no-referrer">
&lt;/div>装饰者模式(Decorator Pattern)：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模</description></item><item><title>AdaptionMode</title><link>liudongdong1.github.io/adaptionmode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong</author><guid>liudongdong1.github.io/adaptionmode/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.stocksnap.io/img-thumbs/280h/laptop-keyboard_NSTHHXBQTL.jpg" referrerpolicy="no-referrer">
&lt;/div>将一个类的接口转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以相互合作。这个定义还好，说适配器的功能就是把一个接口转成另一个接口。</description></item><item><title>Delegation</title><link>liudongdong1.github.io/delegationmode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong</author><guid>liudongdong1.github.io/delegationmode/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.stocksnap.io/img-thumbs/280h/UJVB2QEHNH.jpg" referrerpolicy="no-referrer">
&lt;/div>委派模式(Delegate Pattern ) 又叫委托模式， 是一种面向对象的设计模式， 允许对象组合实现与 继承相同的代码重用。它的基本作用就是负责任务的调用和</description></item><item><title>SingletonMode</title><link>liudongdong1.github.io/singletonmode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>liudongdong</author><guid>liudongdong1.github.io/singletonmode/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.pixabay.com/photo/2021/03/19/04/49/kid-6106557__340.jpg" referrerpolicy="no-referrer">
&lt;/div>单例模式也就是保证一个类只有一个实例的一种实现方法罢了(设计模式其实就是帮助我们解决实际开发过程中的方法, 该方法是为了降低对象之间的耦合度,</description></item></channel></rss>