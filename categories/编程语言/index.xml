<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>编程语言 - 分类 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
    <description>编程语言 - 分类 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 13 Jul 2022 21:31:56 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/" rel="self" type="application/rss+xml" /><item>
  <title>存储结构--LSM树</title>
  <link>https://liudongdong1.github.io/%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84--lsm%E6%A0%91/</link>
  <pubDate>Wed, 13 Jul 2022 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84--lsm%E6%A0%91/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/IYUXFQVKMO.jpg" referrerpolicy="no-referrer">
      </div>LSM树并不像B+树、红黑树一样是一颗严格的树状数据结构，它其实是一种存储结构，目前HBase,LevelDB,RocksDB这些NoSQL]]></description>
</item>
<item>
  <title>GVM</title>
  <link>https://liudongdong1.github.io/gvm/</link>
  <pubDate>Tue, 24 May 2022 07:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/gvm/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/04/11/10/09/apricot-blossoms-7125429__340.jpg" referrerpolicy="no-referrer">
      </div>Go 语言版本管理器（GVM）是管理 Go 语言环境的开源工具。GVM 「pkgsets」 支持安装多个版本的 Go 并管理每个项目的模块。它最初由 Josh Bussdieker 开发，G]]></description>
</item>
<item>
  <title>go标准库-log</title>
  <link>https://liudongdong1.github.io/go%E6%A0%87%E5%87%86%E5%BA%93-log/</link>
  <pubDate>Mon, 23 May 2022 07:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/go%E6%A0%87%E5%87%86%E5%BA%93-log/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/05/23/13/16/bird-7216181__340.jpg" referrerpolicy="no-referrer">
      </div>// 这个示例程序展示如何使用最基本的log包 package main import ( &#34;log&#34; ) func init() { log.SetPrefix(&#34;TRACE: &#34;) log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile) } func main() { // Println写到标准日志记录器 log.Println(&#34;message&#34;) // Fatalln在调用]]></description>
</item>
<item>
  <title>Go规范</title>
  <link>https://liudongdong1.github.io/go%E8%A7%84%E8%8C%83/</link>
  <pubDate>Mon, 23 May 2022 07:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/go%E8%A7%84%E8%8C%83/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/05/25/09/39/animal-7220153__340.jpg" referrerpolicy="no-referrer">
      </div>包中成员以名称首字母大小写决定访问权限。 Public : 首字母大写，可被包外访问； internal : 首字母小写，仅包内成员可以访问； 该规则适用于全局变量、全局常量、类]]></description>
</item>
<item>
  <title>go库-fmt&amp;strconv</title>
  <link>https://liudongdong1.github.io/go%E5%BA%93-fmtstrconv/</link>
  <pubDate>Mon, 23 May 2022 07:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/go%E5%BA%93-fmtstrconv/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/05/09/17/08/mute-swan-7185076__480.jpg" referrerpolicy="no-referrer">
      </div>package main import &#34;fmt&#34; type Person struct { Name string Age int } func main() { a := 10 s := &#34;hello world&#34; p := Person{Name: &#34;wohu&#34;, Age: 25} c := []int{1, 2, 3, 4} fmt.Printf(&#34;p %%v is %v\n&#34;, p) // p %v is {wohu 25} fmt.Printf(&#34;p %%+v is %+v\n&#34;, p) // p %+v is {Name:wohu Age:25} fmt.Printf(&#34;p %%#v is %#v\n&#34;, p) // p %#v is main.Person{Name:&#34;wohu&#34;, Age:25} fmt.Printf(&#34;p type]]></description>
</item>
<item>
  <title>安装目录&amp;工作区&amp;源码&amp;命令.md</title>
  <link>https://liudongdong1.github.io/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%BA%90%E7%A0%81%E5%91%BD%E4%BB%A4/</link>
  <pubDate>Mon, 23 May 2022 07:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%BA%90%E7%A0%81%E5%91%BD%E4%BB%A4/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/04/05/10/21/spider-7113290__340.jpg" referrerpolicy="no-referrer">
      </div>GOROOT: Go 语言安装路径。 GOPATH: 若干工作区目录的路径。是我们自己定义的工作空间。在 Go Module 模式之前非常重要，现在基本上用来存放使用 go get 命令获取的项目。 GOBIN: Go 编]]></description>
</item>
<item>
  <title>DFS &amp; BFS系列</title>
  <link>https://liudongdong1.github.io/dfs-bfs%E7%B3%BB%E5%88%97/</link>
  <pubDate>Tue, 10 May 2022 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/dfs-bfs%E7%B3%BB%E5%88%97/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/WBWKY1FQ2I.jpg" referrerpolicy="no-referrer">
      </div>1. 寻找重复的子树 1 / \ 2 3 / \ 4 5 例如上面这棵树序列化结果为 1,2,#,#,3,4,#,#,5,#,#。每棵不同子树的序列化结果都是唯一的。]]></description>
</item>
<item>
  <title>几何类</title>
  <link>https://liudongdong1.github.io/%E5%87%A0%E4%BD%95%E7%B1%BB/</link>
  <pubDate>Tue, 10 May 2022 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E5%87%A0%E4%BD%95%E7%B1%BB/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/02/25/22/59/pestle-7034940__340.jpg" referrerpolicy="no-referrer">
      </div>1. 直线上最多的点数 给你一个数组 points ，其中 points[i] = [xi, yi] 表示 X-Y 平面上的一个点。求最多有多少个点在同一条直线上。先枚举两条点（确定一条线），然后检查其余]]></description>
</item>
<item>
  <title>锁</title>
  <link>https://liudongdong1.github.io/%E9%94%81/</link>
  <pubDate>Tue, 10 May 2022 17:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E9%94%81/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2013/05/09/09/06/waves-circles-109964__340.jpg" referrerpolicy="no-referrer">
      </div>1. 竞争状态 // 这个示例程序展示如何在程序里造成竞争状态 // 实际上不希望出现这种情况 package main import ( &#34;fmt&#34; &#34;runtime&#34; &#34;sync&#34; ) var ( // counter是所有goroutine都]]></description>
</item>
<item>
  <title>通道</title>
  <link>https://liudongdong1.github.io/%E9%80%9A%E9%81%93/</link>
  <pubDate>Tue, 10 May 2022 17:56:09 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E9%80%9A%E9%81%93/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2022/03/23/13/43/bird-7087260__340.jpg" referrerpolicy="no-referrer">
      </div>在 Go 语言里，你不仅可以使用原子函数和互斥锁来保证对共享资源的安全访问以及消除竞争状态，还可以使用通道，通过发送和接收需要共享的资源，在 goroutine 之间]]></description>
</item>
</channel>
</rss>
