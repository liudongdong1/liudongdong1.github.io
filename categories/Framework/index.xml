<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Framework - 分类 - DAY By DAY</title>
    <link>https://liudongdong1.github.io/categories/framework/</link>
    <description>Framework - 分类 - DAY By DAY</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>3463264078@qq.cn (LiuDongdong)</managingEditor>
      <webMaster>3463264078@qq.cn (LiuDongdong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 02 Dec 2022 21:31:56 &#43;0000</lastBuildDate><atom:link href="https://liudongdong1.github.io/categories/framework/" rel="self" type="application/rss+xml" /><item>
  <title>Android_启动流程</title>
  <link>https://liudongdong1.github.io/android-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Fri, 02 Dec 2022 21:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/android-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2021/09/15/06/29/pot-marigold-6625895__340.jpg" referrerpolicy="no-referrer">
      </div>1. Bootloader U-boot启动流程 第一阶段：汇编代码：U-boot的第一条指令从cpu/armXXX/start.S文件开始 第二阶段：C代码：从文件/]]></description>
</item>
<item>
  <title>Android_Universal_Image_Loader</title>
  <link>https://liudongdong1.github.io/android_universal_image_loader/</link>
  <pubDate>Fri, 02 Dec 2022 09:00:00 &#43;0000</pubDate>
  <author>liudongdong</author>
  <guid>https://liudongdong1.github.io/android_universal_image_loader/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/CJCMX14Z4F.jpg" referrerpolicy="no-referrer">
      </div>ImageLoader&ndash;对外接口 ImageLoader 单例建造者模式构建 public static void initImageLoader(Context context) { // This configuration tuning is custom. You can tune every option, you may tune some of them, // or you can create default configuration by // ImageLoaderConfiguration.createDefault(this); // method. ImageLoaderConfiguration.Builder config =]]></description>
</item>
<item>
  <title>TensorRT</title>
  <link>https://liudongdong1.github.io/tensorrt/</link>
  <pubDate>Thu, 03 Nov 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/tensorrt/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/WKXQ80QKBI.jpg" referrerpolicy="no-referrer">
      </div>ONNX parser: Takes a converted PyTorch trained model into the ONNX format as input and populates a network object in TensorRT. Builder: Takes a network in TensorRT and generates an engine that is optimized for the target platform. Engine: Takes input data, performs inferences, and emits inference output. Logger: Associated with the builder and engine to capture errors, warnings, and other information during the build and inference phases. Convert the]]></description>
</item>
<item>
  <title>uboot启动流程</title>
  <link>https://liudongdong1.github.io/uboot-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Thu, 03 Nov 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/uboot-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/1PN5FLGK44.jpg" referrerpolicy="no-referrer">
      </div>.text: “以下是代码段” .data: “以下是初始化数据段” .bss: “以下是未初始化数据段” .global: 定义一个全局符号，通常是为ld使用。 .abort: 停止汇编 .align absexpr1, absexpr2 : 以某种对齐方式,]]></description>
</item>
<item>
  <title>单元电路</title>
  <link>https://liudongdong1.github.io/%E5%8D%95%E5%85%83%E7%94%B5%E8%B7%AF/</link>
  <pubDate>Thu, 03 Nov 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E5%8D%95%E5%85%83%E7%94%B5%E8%B7%AF/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.pixabay.com/photo/2019/07/14/16/27/pen-4337521__340.jpg" referrerpolicy="no-referrer">
      </div>1、直流稳压电源电路； 2、运算放大器电路； 3、信号产生电路； 4、信号处理电路； 5、传感器应用电路； 6、功率驱动电路； 7、电平转换电路； 8、显]]></description>
</item>
<item>
  <title>开源项目-Margo</title>
  <link>https://liudongdong1.github.io/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-margo/</link>
  <pubDate>Sun, 31 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-margo/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/Z6RA2GAS78.jpg" referrerpolicy="no-referrer">
      </div>Argobots pools with Margo RPCs #include &lt;assert.h&gt; #include &lt;stdio.h&gt; #include &lt;margo.h&gt; #include &lt;alpha-server.h&gt; static void finalize_xstream_cb(void* data); int main(int argc, char** argv) { margo_instance_id mid = margo_init(&#34;tcp&#34;, MARGO_SERVER_MODE, 0, 0); assert(mid); margo_set_log_level(mid, MARGO_LOG_INFO); hg_addr_t my_address; margo_addr_self(mid, &amp;my_address); char addr_str[128]; size_t addr_str_size = 128; margo_addr_to_string(mid, addr_str, &amp;addr_str_size, my_address); margo_addr_free(mid,my_address); margo_info(mid, &#34;Server running at address %s, with provider id 42&#34;, addr_str); ABT_pool pool; ABT_pool_create_basic( ABT_POOL_FIFO, ABT_POOL_ACCESS_SPSC, ABT_TRUE, &amp;pool); ABT_xstream xstream; ABT_xstream_create_basic( ABT_SCHED_DEFAULT,]]></description>
</item>
<item>
  <title>rpc框架-mercury</title>
  <link>https://liudongdong1.github.io/rpc%E6%A1%86%E6%9E%B6_mercury/</link>
  <pubDate>Mon, 25 Jul 2022 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rpc%E6%A1%86%E6%9E%B6_mercury/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/ZK8O6RDT8X.jpg" referrerpolicy="no-referrer">
      </div>Mercury is a Remote Procedure Call (RPC) framework specifically designed for use in High-Performance Computing (HPC) systems with high-performance fabrics. Objective &amp; comparision Objective: Create a reusable RPC libraryfor use in HPC that can serve as a basis for services such as storage systems, I/O forwarding, analysis frameworks and other forms of inter-application communication 优势： takes advantage of low-level HPC network fabrics and facilitates the development of user-level]]></description>
</item>
<item>
  <title>argobots</title>
  <link>https://liudongdong1.github.io/argobots/</link>
  <pubDate>Sat, 23 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/argobots/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/Y2AHVPYB51.jpg" referrerpolicy="no-referrer">
      </div>Condition Variable: a condition on which ULTs are waiting until it is signaled. Execution Stream (ES): a sequential instruction stream that contains one or more work units. Future: a mechanism for passing a value between work units, allowing a work unit to wait for a value that is set asynchronously. Handle: an opaque reference to an Argobots object. Mutex: a synchronization method to support mutual exclusion between work units. Object:]]></description>
</item>
<item>
  <title>argobots</title>
  <link>https://liudongdong1.github.io/argobots_paper/</link>
  <pubDate>Sat, 23 Jul 2022 16:00:04 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/argobots_paper/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/MVZGJMOT0T.jpg" referrerpolicy="no-referrer">
      </div>Paper: argobots SM1 in ES1 has one associated private pool, PM11, and SM2 in ES2 has two private pools, PM21 and PM22. PS is shared between ES1 and ES2, and thus both SM1 in ES1 and SM2 in ES2 can access the pool to push or pop work units. PE denotes an event pool. The event pool is meant for lightweight notification. It is periodically checked by a scheduler to]]></description>
</item>
<item>
  <title>RPC 框架的可靠性设计</title>
  <link>https://liudongdong1.github.io/rpc-%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1/</link>
  <pubDate>Sat, 25 Jun 2022 20:31:56 &#43;0000</pubDate>
  <author>liudongdong1</author>
  <guid>https://liudongdong1.github.io/rpc-%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1/</guid>
  <description><![CDATA[<div class="featured-image">
        <img src="https://cdn.stocksnap.io/img-thumbs/280h/J2URWXE2OY.jpg" referrerpolicy="no-referrer">
      </div>https://www.infoq.cn/article/bzekar1wxqg-2dpare9o 1. 背景 1.1 分布式调用引入的故障 在传统的单体架构中，业务服务调用都是本地方法调用，不会涉及到网络通信、协议栈、消息序列化和反序列化等，当使用 RPC]]></description>
</item>
</channel>
</rss>
