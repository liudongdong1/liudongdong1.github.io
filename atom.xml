<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DaybyDay</title>
  
  <subtitle>Just Keep Happy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liudongdong1.github.io/"/>
  <updated>2022-04-15T10:49:52.411Z</updated>
  <id>https://liudongdong1.github.io/</id>
  
  <author>
    <name>liudongdong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据密集型应用系统设计笔记-事务</title>
    <link href="https://liudongdong1.github.io/2022/04/15/cun-chu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-bi-ji-shi-wu/"/>
    <id>https://liudongdong1.github.io/2022/04/15/cun-chu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-bi-ji-shi-wu/</id>
    <published>2022-04-15T15:31:56.000Z</published>
    <updated>2022-04-15T10:49:52.411Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果事务实际已经执行成功，但返回给客户端的消息在网络传输时发生意外（所以在客户端看来事务是失败)，那么重试就会导致重复执行，此时需要额外的应用级重复数据删除机制。&lt;/li&gt;
&lt;li&gt;如果错误是由于系统超负荷所导致，则重试事务将使情况变得
        
      
    
    </summary>
    
    
      <category term="Storage" scheme="https://liudongdong1.github.io/categories/Storage/"/>
    
    
      <category term="storage" scheme="https://liudongdong1.github.io/tags/storage/"/>
    
  </entry>
  
  <entry>
    <title>STL关联式容器-hashset</title>
    <link href="https://liudongdong1.github.io/2022/04/15/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-hashset/"/>
    <id>https://liudongdong1.github.io/2022/04/15/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-hashset/</id>
    <published>2022-04-15T15:10:04.000Z</published>
    <updated>2022-04-15T09:07:16.090Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;STL 只规范复杂度与接口，并不规范实现方法，但是STL set多半以RB-tree为底层实现机制，SGI则是STL标准规定之外另又提供了一个所谓的hash_set,
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据密集型应用系统设计笔记-数据分区</title>
    <link href="https://liudongdong1.github.io/2022/04/14/cun-chu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-bi-ji-shu-ju-fen-qu/"/>
    <id>https://liudongdong1.github.io/2022/04/14/cun-chu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-bi-ji-shu-ju-fen-qu/</id>
    <published>2022-04-14T15:31:56.000Z</published>
    <updated>2022-04-15T10:50:11.907Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;复制技术，即在不同节点上保存相同数据的多个副本。然而，面对一些海量数据集或非常高的查询压力，复制技术还不够，我们还需要将数据拆分成为分区，也称为分片。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-数据分区-amp-数据复制&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="Storage" scheme="https://liudongdong1.github.io/categories/Storage/"/>
    
    
      <category term="storage" scheme="https://liudongdong1.github.io/tags/storage/"/>
    
  </entry>
  
  <entry>
    <title>STL关联式容器-hashtable</title>
    <link href="https://liudongdong1.github.io/2022/04/14/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-hashtable/"/>
    <id>https://liudongdong1.github.io/2022/04/14/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-hashtable/</id>
    <published>2022-04-14T15:10:04.000Z</published>
    <updated>2022-04-15T09:07:40.495Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;1-哈希冲突&quot;&gt;&lt;a href=&quot;#1-哈希冲突&quot; class=&quot;headerlink&quot; title=&quot;1. 哈希冲突&quot;&gt;&lt;/a&gt;1. 哈希冲突&lt;/h3&gt;&lt;h4 id=&quot;1-线性探测&quot;&gt;&lt;a href=&quot;#1-线性探测&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数据密集型应用系统设计笔记-数据复制</title>
    <link href="https://liudongdong1.github.io/2022/04/14/cun-chu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-bi-ji-shu-ju-fu-zhi/"/>
    <id>https://liudongdong1.github.io/2022/04/14/cun-chu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-bi-ji-shu-ju-fu-zhi/</id>
    <published>2022-04-14T13:31:56.000Z</published>
    <updated>2022-04-15T10:50:23.720Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;数据密集型应用通常也是基于标准模块构建而成，每个模块负责单 的常用功能。例 如，许多应用系统都包含以下模块 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库：用以存储数据，这样之后应用可以再次面问。&lt;/li&gt;
&lt;li&gt;高速缓存
        
      
    
    </summary>
    
    
      <category term="Storage" scheme="https://liudongdong1.github.io/categories/Storage/"/>
    
    
      <category term="storage" scheme="https://liudongdong1.github.io/tags/storage/"/>
    
  </entry>
  
  <entry>
    <title>STL关联式容器-hashmap</title>
    <link href="https://liudongdong1.github.io/2022/04/14/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-hashmap/"/>
    <id>https://liudongdong1.github.io/2022/04/14/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-hashmap/</id>
    <published>2022-04-14T12:10:04.000Z</published>
    <updated>2022-04-15T09:07:04.548Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;hash_multimap 与 hash_map 使用起来相同，只是 hash_multimap 中&lt;strong&gt;允许键值重复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在源码中，hash_multimap 调用的是
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL关联式容器-set</title>
    <link href="https://liudongdong1.github.io/2022/04/12/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-set/"/>
    <id>https://liudongdong1.github.io/2022/04/12/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-set/</id>
    <published>2022-04-12T15:10:04.000Z</published>
    <updated>2022-04-15T09:08:34.681Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;所有元素根据&lt;code&gt;键值自动排序，键值就是实值,实值就是键值，不允许重复键值&lt;/code&gt;。不可通过迭代器改变 set 元素值，是一种 constant iterators&lt;/li&gt;
&lt;li&gt;与 list
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL配接器</title>
    <link href="https://liudongdong1.github.io/2022/04/12/bian-cheng-yu-yan/c/stl-pei-jie-qi/"/>
    <id>https://liudongdong1.github.io/2022/04/12/bian-cheng-yu-yan/c/stl-pei-jie-qi/</id>
    <published>2022-04-12T04:00:04.000Z</published>
    <updated>2022-04-15T09:09:02.482Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;配接器（Adapter）在 STL 组件的灵活组合运用功能上，&lt;strong&gt;扮演着轴承、转换器的角色&lt;/strong&gt;，即&lt;code&gt;将一个 class 的接口转换为另一个 class 的接口&lt;/code&gt;，使原本因接口不兼容而不能合作的
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL仿函数</title>
    <link href="https://liudongdong1.github.io/2022/04/12/bian-cheng-yu-yan/c/stl-fang-han-shu/"/>
    <id>https://liudongdong1.github.io/2022/04/12/bian-cheng-yu-yan/c/stl-fang-han-shu/</id>
    <published>2022-04-12T01:00:04.000Z</published>
    <updated>2022-04-15T09:06:39.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;所谓的仿函数 (functor)，是通过&lt;code&gt;重载 () 运算符模拟函数形为的类&lt;/code&gt;。因此，这里需要明确两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仿函数不是函数，它是个类；&lt;/li&gt;
&lt;li&gt;仿函数重载了 ()
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL关联式容器-RB-tree</title>
    <link href="https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-rb-tree/"/>
    <id>https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-rb-tree/</id>
    <published>2022-04-11T15:10:04.000Z</published>
    <updated>2022-04-15T09:08:12.433Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;左旋： 对节点 X 进行左旋，也就说让节点 X 成为左节点。&lt;/p&gt;
&lt;p&gt;右旋： 对节点 X 进行右旋，也就说让节点 X 成为右节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-单旋转-amp-双旋转&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL序列容器-slist</title>
    <link href="https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-slist/"/>
    <id>https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-slist/</id>
    <published>2022-04-11T15:00:04.000Z</published>
    <updated>2022-04-15T09:11:15.542Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;slist：迭代器属于&lt;code&gt;单向的 Forward Iterator（可读写）&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;list ：迭代器属于双向的 Bidirectional
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL序列容器-deque</title>
    <link href="https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-deque/"/>
    <id>https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-deque/</id>
    <published>2022-04-11T14:00:04.000Z</published>
    <updated>2022-04-15T09:09:49.962Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;deque
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL迭代器</title>
    <link href="https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-die-dai-qi/"/>
    <id>https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-die-dai-qi/</id>
    <published>2022-04-11T14:00:04.000Z</published>
    <updated>2022-04-15T09:06:14.664Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;迭代器是一种抽象的设计概念，iterator 模式定义如下：&lt;code&gt;提供一种方法，使之能够依序访问某个聚合物所含的各个元素，从而无需暴露该聚合物的内部表述方式；&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 STL
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL序列容器-vector</title>
    <link href="https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-vector/"/>
    <id>https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-vector/</id>
    <published>2022-04-11T08:00:04.000Z</published>
    <updated>2022-04-15T09:13:28.922Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;vector底层实现使用连续数组，提供动态数组功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-数据结构&quot;&gt;&lt;a href=&quot;#1-数据结构&quot; class=&quot;headerlink&quot; title=&quot;1. 数据结构&quot;&gt;&lt;/a&gt;1.
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL序列容器-list</title>
    <link href="https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-list/"/>
    <id>https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-list/</id>
    <published>2022-04-11T04:00:04.000Z</published>
    <updated>2022-04-15T09:10:35.600Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;list底层实现是使用双向链表，内部有个node节点指向链表尾部，实现循环链表，提供快速插入删除操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-数据结构&quot;&gt;&lt;a href=&quot;#1-数据结构&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL关联式容器-map</title>
    <link href="https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-map/"/>
    <id>https://liudongdong1.github.io/2022/04/11/bian-cheng-yu-yan/c/stl-guan-lian-shi-rong-qi-map/</id>
    <published>2022-04-10T16:10:04.000Z</published>
    <updated>2022-04-15T09:07:47.889Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;会根据元素键值自动被排序，所有元素都是 pair，同时拥有实值 value 和键值 key，其 pair 是
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>FileOp</title>
    <link href="https://liudongdong1.github.io/2022/04/10/linux/unix-huan-jing-gao-ji-bian-cheng-wen-jian/"/>
    <id>https://liudongdong1.github.io/2022/04/10/linux/unix-huan-jing-gao-ji-bian-cheng-wen-jian/</id>
    <published>2022-04-10T14:21:29.000Z</published>
    <updated>2022-04-15T10:52:13.828Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;1-文件共享&quot;&gt;&lt;a href=&quot;#1-文件共享&quot; class=&quot;headerlink&quot; title=&quot;1. 文件共享&quot;&gt;&lt;/a&gt;1. 文件共享&lt;/h3&gt;&lt;h4 id=&quot;1-内核文件数据结构&quot;&gt;&lt;a href=&quot;#1-内核文件数据结构&quot;
        
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://liudongdong1.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://liudongdong1.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>STL迭代器失效</title>
    <link href="https://liudongdong1.github.io/2022/04/10/bian-cheng-yu-yan/c/stl-die-dai-qi-shi-xiao/"/>
    <id>https://liudongdong1.github.io/2022/04/10/bian-cheng-yu-yan/c/stl-die-dai-qi-shi-xiao/</id>
    <published>2022-04-10T04:00:04.000Z</published>
    <updated>2022-04-15T09:06:28.010Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当容器调用 &lt;code&gt;erase()&lt;/code&gt; 方法后，当前位置到容器末尾元素的所有迭代器全部失效。&lt;/li&gt;
&lt;li&gt;当容器调用 &lt;code&gt;insert()&lt;/code&gt;
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL序列容器-priority_queue</title>
    <link href="https://liudongdong1.github.io/2022/04/09/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-priority-queue/"/>
    <id>https://liudongdong1.github.io/2022/04/09/bian-cheng-yu-yan/c/stl-xu-lie-rong-qi-priority-queue/</id>
    <published>2022-04-09T15:00:04.000Z</published>
    <updated>2022-04-15T09:20:00.987Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;1-数据结构&quot;&gt;&lt;a href=&quot;#1-数据结构&quot; class=&quot;headerlink&quot; title=&quot;1. 数据结构&quot;&gt;&lt;/a&gt;1. 数据结构&lt;/h3&gt;&lt;pre class=&quot; language-c++&quot;&gt;&lt;code
        
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://liudongdong1.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://liudongdong1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>备份技术</title>
    <link href="https://liudongdong1.github.io/2022/04/09/cun-chu-she-ji/bei-fen-ji-zhu/"/>
    <id>https://liudongdong1.github.io/2022/04/09/cun-chu-she-ji/bei-fen-ji-zhu/</id>
    <published>2022-04-09T14:00:04.000Z</published>
    <updated>2022-04-15T10:47:08.234Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;为应付文件、数据丢失或损坏等可能出现的意外情况，将电子计算机存储设备中的数据复制到磁带等大容量存储设备中&lt;/p&gt;
&lt;p&gt;备份实际就是一种 “复制”
        
      
    
    </summary>
    
    
      <category term="Storage" scheme="https://liudongdong1.github.io/categories/Storage/"/>
    
    
      <category term="storage" scheme="https://liudongdong1.github.io/tags/storage/"/>
    
  </entry>
  
</feed>
